import React, { useState, useEffect } from "react";
import Head from "next/head";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { ensureConnected } from "@/utils/bluetooth/js/main";
import { replRawMode, replSend } from "@/utils/bluetooth/js/repl";
import { Button, Select, Input, InputNumber } from "antd";
import { useWhisper } from "@chengsokdara/use-whisper";
import { app } from "@/utils/app";
import { execMonocle } from "@/utils/comms";

const inter = Inter({ subsets: ["latin"] });

const WIDTH = 640;
const HEIGHT = 400;
const FONT_WIDTH = 24;
const FONT_HEIGHT = 48;

const Home = () => {
  // Bestehende ZustÃ¤nde

  const handleLanguageChange = (value) => {
    setLanguage(value);
    setInputLanguage(value);
    setLanguagePrompt(value);
  };

  const [apiKey, setApiKey] = useState(process.env.NEXT_PUBLIC_OPENAI_API_TOKEN);
  const [inputLanguage, setInputLanguage] = useState("de");
  const [connected, setConnected] = useState(false);
  const [isRecording, setIsRecording] = useState(false);
  const { startRecording, stopRecording, transcript } = useWhisper({
    apiKey: apiKey,
    streaming: true,
    timeSlice: 500,
    whisperConfig: {
      language: inputLanguage,
    },
  });

  const [temperature, setTemperature] = useState(1.0);
  const [language, setLanguage] = useState("de");
  const [response, setResponse] = useState("");
  const [systemPrompt, setSystemPrompt] = useState("");
  const [question, setQuestion] = useState("");
  const [displayedResponse, setDisplayedResponse] = useState("");

  const setLanguagePrompt = (language) => {
    let systemPrompt;
    switch (language) {
      case "de":
        systemPrompt = "Du biskorrwort zu erreichen!";
        break;
      case "it":
        systemPrompt = "Sei un utire  riassumere ni risposta!";
        break;
      case "en":
        systemPrompt = "You are a nswers anvery answer!";
        break;
      default:
        systemPrompt = "Du bist ein hijeder Antwort zu erreichen!";
    }
    setSystemPrompt(systemPrompt);
  };

  const fetchGpt = async () => {
    const messages = [
      { role: "system", content: systemPrompt },
      { role: "user", content: transcript.text }, // Verwende den transkribierten Text als Frage
    ];

    const response = await fetch(`https://api.openai.com/v1/chat/completions`, {
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: messages,
        temperature: temperature,
        max_tokens: 2000,
      }),
      headers: {
        Authorization: `Bearer ${apiKey}`,
        "Content-Type": "application/json",
      },
      method: "POST",
    });

    if (!response.ok) {
      const message = await response.text();
      console.error("API request error:", response.status, message);
      throw new Error(`API request failed: ${message}`);
    }

    const resJson = await response.json();
    const res = resJson?.choices?.[0]?.message?.content;
    if (!res) return;

    setDisplayedResponse("");
    for (let i = 0; i <= res.length; i++) {
      const substr = res.substring(0, i);
      setDisplayedResponse(substr);
      await new Promise((resolve) => setTimeout(resolve, 50));
    }

    setResponse(res);
    await displayRawRizz(res);
  };

  useEffect(() => {
    window.transcript = transcript.text;
  }, [transcript.text]);

  useEffect(() => {
    setLanguagePrompt(language);
  }, [language]);

  function wrapText(inputText) {
    const columns = Math.floor(WIDTH / FONT_WIDTH);
    const rows = Math.floor(HEIGHT / FONT_HEIGHT);
    const maxLength = columns * rows;
    const wrappedText = [];

    for (let i = 0; i < inputText.length; i += maxLength) {
      wrappedText.push(inputText.substring(i, i + maxLength));
    }

    return wrappedText;
  }

  async function displayRizz(rizz) {
    if (!rizz) return;
    const wrappedText = wrapText(rizz);
    let replCmd = "import display;";

    for (let i = 0; i < wrappedText.length; i++) {
      replCmd += `display.text("${wrappedText[i]}", 0, ${i * FONT_HEIGHT}, 0xffffff);`;
    }

    replCmd += "display.show();";
    console.log("**** replCmd ****", replCmd);
    await replSend(replCmd);
  }

  async function displayRawRizz(rizz) {
    await replRawMode(true);
    await displayRizz(rizz);
  }

  async function logger(msg) {
    if (msg === "Connected") {
      setConnected(true);
    }
  }

  function relayCallback(msg) {
    if (!msg) {
      return;
    }
    if (msg.trim() === "trigger b") {
      // Left btn
      // fetchGpt();
    }

    if (msg.trim() === "trigger a") {
      // Right btn
      // onRecord();
    }
  }

  function onRecord() {
    isRecording ? stopRecording() : startRecording();
    setIsRecording(!isRecording);
  }

  return (
    <>
      <Head>
        <title>chatGPT</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${inter.className} ${styles.main}`}>
        <div className="flex w-screen h-screen flex-col items-center justify-start">
          <h1 className="text-3xl">chatGPT</h1>
          <p className="text-3xl mb-4">{connected ? "Monocle Connected" : "Monocle Disconnected"}</p>
          <div style={{ width: "90%" }}>
            <Input className="mb-2" style={{ height: "40px" }} value={apiKey} onChange={(e) => setApiKey(e.target.value)} placeholder="API Key" />
            <InputNumber className="mb-2" style={{ width: "100%", height: "40px" }} min={0} max={2} step={0.1} value={temperature} onChange={(value) => setTemperature(value)} />
            <Select
              className="mb-2"
              style={{ width: "100%", height: "40px" }}
              value={language}
              onChange={handleLanguageChange}
            >
              <Select.Option value="de">Deutsch</Select.Option>
              <Select.Option value="it">Italiano</Select.Option>
              <Select.Option value="en">English</Select.Option>
            </Select>
            <Input.TextArea className="mb-2" style={{ height: "100px" }} value={systemPrompt} placeholder="Define the role of GPT-3" onChange={(e) => setSystemPrompt(e.target.value)} autoSize={{ minRows: 2, maxRows: 10 }} />
            <Input.TextArea className="mb-2" style={{ height: "600px" }} readOnly value={displayedResponse} autoSize={{ minRows: 3, maxRows: 10 }} />
            <Button className="mb-2" type="primary" onClick={async () => {
              await ensureConnected(logger, relayCallback);
              app.run(execMonocle);
              await displayRawRizz();
            }}>
              Connect
            </Button>
            <Button className="mb-2" onClick={onRecord}>
              {isRecording ? "Stop recording" : "Start recording"}
            </Button>
            <Button className="mb-2" onClick={fetchGpt}>Get response</Button>
          </div>
          {transcript.text}
        </div>
      </main>
    </>
  );
};

export default Home;
